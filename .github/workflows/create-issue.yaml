name: create new issue

on: 
  push:
  workflow_dispatch:

# GOOD ONE
# echo "   copy=$(gh api /repos/department-of-veterans-affairs/lighthouse-devops-support/commits --method GET --field path=.github/ISSUE_TEMPLATE/maintenance-request.md --jq '.[0].commit.committer.date') " >> $GITHUB_OUTPUT
# echo "source=$(gh api /repos/department-of-veterans-affairs/lighthouse-devops-support/commits/ --method GET --field path=.github/ISSUE_TEMPLATE/maintenance-request.md --jq '.[0].commit.committer.date') " >> $GITHUB_OUTPUT && if [[ $? != 0 ]]; then exit $?; fi
jobs:
  get-file-timestamps:
    name: Compare file timestamps
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        include:
          - org: mhaley37
            role: source
            repo: mhaley37
             #path: .github/ISSUE_TEMPLATE/maintenance-request.md
            path: README.md
          - org: department-of-veterans-affairs
            role: copy
            repo: lighthouse-devops-support
            path: .github/ISSUE_TEMPLATE/maintenance-request.md
    outputs:
      copy: ${{ steps.get-file-update-time.outputs.copy}}
      source: ${{ steps.get-file-update-time.outputs.source }}
    steps:
      - uses: octokit/request-action@v2.x
        name: Get last update time of file
        id: get-file-update-time
        with:
          route: GET /repos/{owner}/{repo}/commits
          owner: ${{ matrix.org }}
          repo: ${{ matrix.repo }}
          path: ${{ matrix.path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}      
      # - name: Get last update time of file
      #   id: get-file-update-time
      #   env:
      #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
      #   run: >-
      #     echo "${{ matrix.role }}=$(gh api /repos/${{ matrix.org }}/${{ matrix.repo }}/commits
      #     --method GET
      #     --field path=${{ matrix.path}}
      #     --jq '.[0].commit.committer.date')
      #     " >> $GITHUB_OUTPUT
      # - name: Exit if missing timestamp
      #   if: ${{ steps.get-file-update-time.outputs.data}}

      # echo "value=$( 
      #   echo ${{ steps.get-file-update-time.outputs.data }} 
      #   | jq -r '.[0].commit.committer.date'
      #   )" >> $GITHUB_OUTPUTS
      - name: Parse out date
        id: parse-date
        run: |
          echo "${{ steps.get-file-update-time.outputs.data }}" | jq '.'
      - name: Echo timestamp
        run: |
          echo "${{ steps.parse-date.outputs.value }}"
        shell: bash

  compare-file-timestamps:
    name: Compare file timestamps
    needs: get-file-timestamps
    runs-on: ubuntu-latest
    steps:
      - name: Copy is out of date
        if: needs.get-file-timestamps.outputs.copy < needs.get-file-timestamps.outputs.source
        run: echo "File is out of date!"
        

  # create-issue:
  #   name: Create a new issue
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Create issue
  #       id: create-issue
  #       uses: './.github/actions/create-maintenance-request'
  #       with:
  #         gh-token: ${{ github.token }}
  #         new-version: '23.12.4'
  #         old-version: '23.11.2'
  #     - name: Echo results
  #       run: |
  #         echo New Issues Created, number ${{ steps.create-issue.outputs.issue-number }}
  #         echo The URL is ${{ steps.create-issue.outputs.url }}